"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

exports.__esModule = true;
exports.GitalkPluginHelper = exports.default = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _Gitalk = _interopRequireDefault(require("./components/Gitalk"));

var _axios = _interopRequireDefault(require("axios"));

var createIssue = /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2.default)( /*#__PURE__*/_regenerator.default.mark(function _callee(options, reporter) {
    var owner, repo, title, body, id, _options$labels, labels, description, personalToken, url, queryStr, axiosGithub, res;

    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (reporter === void 0) {
              reporter = console;
            }

            owner = options.owner, repo = options.repo, title = options.title, body = options.body, id = options.id, _options$labels = options.labels, labels = _options$labels === void 0 ? ['Gitalk'] : _options$labels, description = options.description, personalToken = options.personalToken, url = options.url;
            queryStr = "\"Gitalk_" + id + "\" type:issue in:body " + labels.map(function (label) {
              return "label:" + label;
            }).join(' ') + " repo:" + owner + "/" + repo;
            axiosGithub = _axios.default.create({
              baseURL: 'https://api.github.com',
              auth: {
                username: owner,
                password: personalToken
              },
              headers: {
                'Accept': 'application/json'
              }
            });
            _context.next = 6;
            return axiosGithub.get("/search/issues", {
              params: {
                q: queryStr,
                t: Date.now()
              }
            });

          case 6:
            res = _context.sent;

            if (!(res && res.data && res.data.total_count)) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return");

          case 9:
            _context.prev = 9;
            _context.next = 12;
            return axiosGithub.post("/repos/" + owner + "/" + repo + "/issues", {
              title: title,
              labels: labels,
              body: body || url + " \n\n " + description + "\n\nGitalk_" + id
            });

          case 12:
            _context.next = 17;
            break;

          case 14:
            _context.prev = 14;
            _context.t0 = _context["catch"](9);
            reporter.error(_context.t0);

          case 17:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[9, 14]]);
  }));

  return function createIssue(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var _default = _Gitalk.default;
exports.default = _default;
var GitalkPluginHelper = {
  createIssue: createIssue
};
exports.GitalkPluginHelper = GitalkPluginHelper;